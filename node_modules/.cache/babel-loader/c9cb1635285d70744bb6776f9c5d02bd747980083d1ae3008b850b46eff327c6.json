{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ravi8\\\\firstapp\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\n/*import BlogList from './BlogList';\r\nimport BlogForm from './BlogForm';\r\nimport BlogPost from './BlogPost';*/\n\n/*const App = () => {\r\n    const [blogs, setBlogs] = useState([]);\r\n    const [selectedBlog, setSelectedBlog] = useState(null);\r\n\r\n    const handleCreateBlog = (blog) => {\r\n        setBlogs([...blogs, { id: Date.now(), ...blog }]);\r\n    };\r\n\r\n    const handleEditBlog = (id) => {\r\n        const blogToEdit = blogs.find((blog) => blog.id === id);\r\n        setSelectedBlog(blogToEdit);\r\n    };\r\n\r\n    const handleUpdateBlog = (updatedBlog) => {\r\n        const updatedBlogs = blogs.map((blog) => (blog.id === updatedBlog.id ? updatedBlog : blog));\r\n        setBlogs(updatedBlogs);\r\n        setSelectedBlog(null);\r\n    };\r\n\r\n    const handleDeleteBlog = (id) => {\r\n        const updatedBlogs = blogs.filter((blog) => blog.id !== id);\r\n        setBlogs(updatedBlogs);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <BlogList blogs={blogs} onEdit={handleEditBlog} onDelete={handleDeleteBlog} />\r\n            {selectedBlog ? (\r\n                <BlogForm onSubmit={handleUpdateBlog} initialBlog={selectedBlog} />\r\n            ) : (\r\n                <BlogForm onSubmit={handleCreateBlog} />\r\n            )}\r\n            {selectedBlog && <BlogPost blog={selectedBlog} />}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;*/\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // State to manage tasks\n  const [tasks, setTasks] = useState([]);\n  // State to manage the input value\n  const [taskInput, setTaskInput] = useState('');\n\n  // Function to add a new task\n  const addTask = () => {\n    if (taskInput.trim() !== '') {\n      setTasks([...tasks, taskInput]);\n      setTaskInput('');\n    }\n  };\n\n  // Function to update a task\n  const updateTask = (index, newTask) => {\n    const updatedTasks = [...tasks];\n    updatedTasks[index] = newTask;\n    setTasks(updatedTasks);\n  };\n\n  // Function to delete a task\n  const deleteTask = index => {\n    const updatedTasks = [...tasks];\n    updatedTasks.splice(index, 1);\n    setTasks(updatedTasks);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Task Manager\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: taskInput,\n        onChange: e => setTaskInput(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addTask,\n        children: \"Add Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: tasks.map((task, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: task,\n          onChange: e => updateTask(index, e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => deleteTask(index),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"fc089a2pWZ6eDK9yPJPsKtIInrI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","tasks","setTasks","taskInput","setTaskInput","addTask","trim","updateTask","index","newTask","updatedTasks","deleteTask","splice","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","onClick","map","task","_c","$RefreshReg$"],"sources":["C:/Users/ravi8/firstapp/src/App.jsx"],"sourcesContent":["/*import BlogList from './BlogList';\r\nimport BlogForm from './BlogForm';\r\nimport BlogPost from './BlogPost';*/\r\n\r\n\r\n/*const App = () => {\r\n    const [blogs, setBlogs] = useState([]);\r\n    const [selectedBlog, setSelectedBlog] = useState(null);\r\n\r\n    const handleCreateBlog = (blog) => {\r\n        setBlogs([...blogs, { id: Date.now(), ...blog }]);\r\n    };\r\n\r\n    const handleEditBlog = (id) => {\r\n        const blogToEdit = blogs.find((blog) => blog.id === id);\r\n        setSelectedBlog(blogToEdit);\r\n    };\r\n\r\n    const handleUpdateBlog = (updatedBlog) => {\r\n        const updatedBlogs = blogs.map((blog) => (blog.id === updatedBlog.id ? updatedBlog : blog));\r\n        setBlogs(updatedBlogs);\r\n        setSelectedBlog(null);\r\n    };\r\n\r\n    const handleDeleteBlog = (id) => {\r\n        const updatedBlogs = blogs.filter((blog) => blog.id !== id);\r\n        setBlogs(updatedBlogs);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <BlogList blogs={blogs} onEdit={handleEditBlog} onDelete={handleDeleteBlog} />\r\n            {selectedBlog ? (\r\n                <BlogForm onSubmit={handleUpdateBlog} initialBlog={selectedBlog} />\r\n            ) : (\r\n                <BlogForm onSubmit={handleCreateBlog} />\r\n            )}\r\n            {selectedBlog && <BlogPost blog={selectedBlog} />}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;*/\r\n\r\nimport React, { useState } from 'react';\r\n\r\nconst App = () => {\r\n  // State to manage tasks\r\n  const [tasks, setTasks] = useState([]);\r\n  // State to manage the input value\r\n  const [taskInput, setTaskInput] = useState('');\r\n\r\n  // Function to add a new task\r\n  const addTask = () => {\r\n    if (taskInput.trim() !== '') {\r\n      setTasks([...tasks, taskInput]);\r\n      setTaskInput('');\r\n    }\r\n  };\r\n\r\n  // Function to update a task\r\n  const updateTask = (index, newTask) => {\r\n    const updatedTasks = [...tasks];\r\n    updatedTasks[index] = newTask;\r\n    setTasks(updatedTasks);\r\n  };\r\n\r\n  // Function to delete a task\r\n  const deleteTask = (index) => {\r\n    const updatedTasks = [...tasks];\r\n    updatedTasks.splice(index, 1);\r\n    setTasks(updatedTasks);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Task Manager</h1>\r\n\r\n      {/* Input for adding a new task */}\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          value={taskInput}\r\n          onChange={(e) => setTaskInput(e.target.value)}\r\n        />\r\n        <button onClick={addTask}>Add Task</button>\r\n      </div>\r\n\r\n      {/* List of tasks */}\r\n      <ul>\r\n        {tasks.map((task, index) => (\r\n          <li key={index}>\r\n            {/* Input for updating a task */}\r\n            <input\r\n              type=\"text\"\r\n              value={task}\r\n              onChange={(e) => updateTask(index, e.target.value)}\r\n            />\r\n            {/* Button to delete a task */}\r\n            <button onClick={() => deleteTask(index)}>Delete</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}